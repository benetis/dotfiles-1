#!/usr/bin/perl -w

# based on https://github.com/itsamenathan/libnotify-over-ssh

use strict;
use warnings;

use IO::Socket;
use File::Basename;
use Cwd 'abs_path';

my $scriptpath = dirname(abs_path($0));

my $HOST = '127.0.0.1';
my $PORT = '1216';

my $socket = IO::Socket::INET->new('LocalPort' => $PORT, 'Proto' => 'tcp', 'Listen' => 4) or die "Can't create socket ($!)\n";

while (my $client = $socket->accept) {
  eval {
    local $SIG{ALRM} = sub { die 'timeout'; };
    alarm 3; # 3 seconds time-out for ALL communication
    if (defined(my $cmd = <$client>)) {
      $cmd =~ s/\s+$//g;
      if ($cmd eq "ping") {
        $client->send("pong\r\n");
      }
      elsif ($cmd eq "notify") {
        my ($tag, $summary, $body);
        my $ok = 0;
        my $x = 0;
        while (($ok == 0) && (my $buf = <$client>)) {
          $buf =~ s/\s+$//g;
          $x++;
          if    ($x == 1) { $tag = $buf; }
          elsif ($x == 2) { $summary = $buf; }
          else            { $body = $buf; $ok = 1; }
        }
        message($tag, $summary, $body) if ($ok);
        $client->send("ok\n");
      }
      else {
        $client->send("unknown command; possible 2 usages:\n   ping\\n\n   notify\\n\<tag>\\n\<summary>\\n\<body>\\n\n");
      }
    }
    alarm 0;
  };
  alarm 0; # race condition protection
  close $client or die "Can't close ($!)\n";
}

sub sanitize {
  my ($r) = @_;
  $r =~ s/&/&amp;/g;
  $r =~ s/</&lt;/g;
  $r =~ s/>/&gt;/g;
  return $r;
}

sub message {
  my ($tag, $summary, $body) = @_;
  $summary = sanitize($summary);
  $body = sanitize($body);

  #if ($tag eq 'system'){
    my @args = ('/usr/bin/notify-send', '-h', 'int:transient:1', $summary, $body);
    system @args;
  #}
}
