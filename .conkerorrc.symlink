// -*- mode: javascript -*-

// Keep current profile name and URL in X window name (for
// pass-autotype).
title_format_fn = function (window) {
  return 'conkeror \u2014 ' + get_current_profile() + ' \u2014 ' + window.buffers.current.description;
};

// Killing the last buffer will add another `about:blank` one. If the
// last one *is* `about:blank`, however, do kill the window.
add_hook("window_before_close_hook",
         function (window) {
             let bs = window.buffers;
             let last = bs.current;
             if (bs.count == 1 && last.display_uri_string != homepage) {
                 load_url_in_new_buffer(homepage, window);
                 kill_buffer(last, true);
                 return false;
             }
             else return true;
         });

// Make xdg-open open new URLs in an existing X11 window.
url_remoting_fn = load_url_in_new_buffer;

// Key aliases.
require("global-overlay-keymap");
define_key_alias("C-context_menu", "M-x"); // Emacs does this and I
                                           // grew accustomed…

// Redefine next/prev to M-] and M-[ (as in Emacs).
undefine_key(default_global_keymap, "M-n");
undefine_key(default_global_keymap, "M-p");
undefine_key(default_global_keymap, "M-N");
undefine_key(default_global_keymap, "M-P");
define_key(default_global_keymap, "M-]", "buffer-next");
define_key(default_global_keymap, "M-[", "buffer-previous");
define_key(default_global_keymap, "M-}", "buffer-move-forward");
define_key(default_global_keymap, "M-{", "buffer-move-backward");

// Home.
homepage = "about:blank";

// `,pl` is needed so that Google will NOT display in Polish when
// accessed from Poland…
user_pref('intl.accept_languages', 'en,pl');

// Privacy!
session_pref('browser.privatebrowsing.autostart', true);
session_pref('privacy.donottrackheader.enabled', true);
session_pref('datareporting.healthreport.uploadEnabled', false);
session_pref('datareporting.policy.dataSubmissionEnabled', false);
session_pref('toolkit.telemetry.enabled', false);

// NoScript.
if ('@maone.net/noscript-service;1' in Cc) require("noscript");
user_pref("capability.policy.maonoscript.sites",
          " about: about:addons about:blank about:blocked about:certerror about:config about:crashes about:home about:memory about:neterror about:plugins about:preferences about:privatebrowsing about:sessionrestore about:srcdoc about:support blob: chrome: mediasource: moz-extension: moz-safe-about: resource: " +
          " ajax.googleapis.com bootstrapcdn.com code.jquery.com " +
          " google.com googlevideo.com gstatic.com maps.googleapis.com yimg.com youtube.com ytimg.com google.pl ");

// Pretend to be real Firefox (otherwise, some apps display their
// versions back from 2000s… looking at you, Google. ಠ_ಠ).
session_pref('general.useragent.compatMode.firefox', true);

// Fit images to window size.
session_pref("browser.enable_automatic_image_resizing", true);

// Oh, don’t autoplay the media…
session_pref("media.autoplay.enabled", false);

// However, if I turn the history back on…
url_completion_use_history = true;

// By default, save stuff in ~/Downloads/.
suggest_save_path_from_file_name = function (filename, buffer) {
    let f = make_file("~/Downloads/");
    f.append(filename);
    return f.path;
};

// Add buffer num/count information to mode line.
add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);

// Turn off strict JS checks (these slowed YouTube down by a *lot*).
session_pref("javascript.options.strict", false);

// Plain text in clipboard! Yesss…
session_pref("clipboard.plainTextOnly", true);

// Turn off key stealing on some websites.
require("key-kill");
key_kill_mode.test.push(build_url_regexp($domain = "google", $allow_www = true, $tlds = ["com", "pl"]));
key_kill_mode.test.push(build_url_regexp($domain = "calendar.google"));
key_kill_mode.test.push(build_url_regexp($domain = "drive.google"));
key_kill_mode.test.push(build_url_regexp($domain = "facebook", $allow_www = true));
key_kill_mode.test.push(build_url_regexp($domain = "youtube", $allow_www = true));
key_kill_mode.test.push(build_url_regexp($domain = "github", $allow_www = true));

// Open links in new buffers on middle-button click (and C-click with
// my patch).
require("clicks-in-new-buffer.js");

// µBlock ‘glue.’ To install extensions semi-automatically, add them
// to the `${conkeror}/libexec/conkeror/extensions/` directory.
interactive(
    "ublock", "Open uBlock dashboard in a new buffer",
    function (I) {
        var ublock_branch;
        if     ("@ublock0/content-policy;1" in Cc) ublock_branch = "ublock0";
        else if ("@ublock/content-policy;1" in Cc) ublock_branch = "ublock";
        else throw interactive_error("uBlock not found");
        load_url_in_new_buffer("chrome://" + ublock_branch + "/content/dashboard.html");
    }
);

// DOM Inspector.
require("dom-inspector.js");

// Webjumps.
define_webjump('babla', 'http://en.bab.la/dictionary/polish-english/%s');
define_webjump('diki', 'http://www.diki.pl/slownik-angielskiego/?q=%s&source=opensearch');
define_webjump('fd', 'http://www.thefreedictionary.com/_/search.aspx?pid=osearch&word=%s');
define_webjump('mw', 'http://www.merriam-webster.com/dictionary/%s');
define_webjump('sjp', 'http://sjp.pwn.pl/szukaj/%s.html');
define_webjump('translate', 'http://translate.google.com/translate_t#auto|en|%s');

define_webjump('allegro', 'http://allegro.pl/listing/listing.php?string=%s&search_scope=');
define_webjump('facebook', 'https://www.facebook.com/search/more?q=%s');
define_webjump('filmweb', 'http://www.filmweb.pl/search?q=%s&source=opensearch');
define_webjump('ilewazy', 'http://ilewazy.pl/produkty/page/1/q/%s');
define_webjump('quora', 'http://www.quora.com/opensearch/query?q=%s&pw={startPage?}');
define_webjump('soundcloud', 'http://soundcloud.com/search?q=%s');
define_webjump('torrentz-eu', 'https://torrentz.eu/search?q=%s');
define_webjump('tpb', 'http://thepiratebay.cd/search/%s/0/7/0');
define_webjump('twitter', 'https://twitter.com/search?q=%s');
define_webjump('yelp', 'http://www.yelp.com/search?find_desc=%s&src=opensearch');
define_webjump('youtube', 'https://www.youtube.com/results?search_query=%s&page={startPage?}&utm_source=opensearch');

define_webjump("archive", "https://web.archive.org/web/*/%s");
define_webjump('debian', 'https://packages.debian.org/search?keywords=%s');
define_webjump('isup', 'http://www.downforeveryoneorjustme.com/%s');
define_webjump('nixpkgs', 'https://github.com/NixOS/nixpkgs/search?utf8=%E2%9C%93&q=%s');
define_webjump('wolframalpha', 'http://www.wolframalpha.com/input/?i=%s');

// XKCD.
xkcd_add_title = true;

// Restoring killed buffers. Based on https://git.io/voaqM .
let killed_buffers_metadata = [];

// Save the original `kill-buffer`.
let __original_kill_buffer = kill_buffer;

// Advice `kill-buffer` with saving buffer metadata.
kill_buffer = function (buffer, force) {
    if (buffer.display_uri_string && buffer.display_uri_string != homepage) {
        let md = {
            url: buffer.display_uri_string,
            title: buffer.title,
            history: buffer.web_navigation.sessionHistory
        };
        let md_json = JSON.stringify(md);
        if (killed_buffers_metadata.findIndex(e => JSON.stringify(e) == md_json) < 0)
            killed_buffers_metadata.push(md);
    }
    __original_kill_buffer(buffer, force);
};

// New command to restore a killed buffer.
define_key(content_buffer_normal_keymap, "M-q", "restore-killed-buffer");
interactive(
    "restore-killed-buffer",
    "Restores a previously killed buffer (GETs the URL and sets its history back).",
    function (I) {
        if (killed_buffers_metadata.length !== 0) {
            let killed = yield I.minibuffer.read(
                $prompt = "Restore a killed buffer:",
                $completer = new all_word_completer($completions = killed_buffers_metadata,
                                                    $get_string = md => md.url,
                                                    $get_description = md => md.title),
                $default_completion = killed_buffers_metadata[killed_buffers_metadata.length - 1],
                $auto_complete = "url",
                $auto_complete_initial = true,
                $auto_complete_delay = 0,
                $require_match = true
            );
            load_url_in_new_buffer(killed.url);
            let buf = I.window.buffers.current;
            let nav = buf.web_navigation;
            nav.sessionHistory = killed.history;
            nav.gotoIndex(nav.sessionHistory.index);
        } else I.window.minibuffer.message("No killed buffers.");
    });

// Opening URLs in `mpv`. Based on http://jaderholm.com/paste/mpv.js.html .
define_key(content_buffer_normal_keymap, "m", "mpv");
interactive(
    "mpv",
    "Play URL in mpv",
    alternates(mpv, mpv_changing_command),
    $browser_object = browser_object_links);
function mpv_changing_command(I) {
    yield mpv(I, true);
}
function mpv (I, change_command) {
    let cwd = I.local.cwd;
    let element = yield read_browser_object(I);
    let spec = load_spec(element);
    let uri = load_spec_uri_string(spec);
    var cmd = "mpv";
    var panel;
    if (change_command) try {
        panel = create_info_panel(
            I.window,
            "download-panel",
            [["downloading",
              element_get_operation_label(element, "Running on", "URI"),
              load_spec_uri_string(spec)],
             ["mime-type", "Mime type:", load_spec_mime_type(spec)]]);
        cmd = yield I.minibuffer.read_shell_command(
            $cwd = cwd,
            $initial_value = cmd);
    } finally {
        if (panel) panel.destroy();
    }
    shell_command_with_argument_blind(cmd + " {}", uri, $cwd = cwd);
}
