;; -*- mode: emacs-lisp -*-

;; don’t clutter file trees with backups~ and #autosaves#
(let ((tmp (expand-file-name "./tmp/" user-emacs-directory)))
  (setq backup-directory-alist `((".*" . ,tmp)))
  (setq auto-save-file-name-transforms `((".*" ,tmp t))))

;; tabs
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

;; sane whitespace behavior
(setq-default require-final-newline t)
(setq-default delete-trailing-lines t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; always highlight the corresponding parenthesis
(setq show-paren-delay 0)
(show-paren-mode 1)

;; navigation history
(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "M-[") 'previous-buffer)

;; turn-off (overwrite-mode) on <insert>
(global-unset-key (kbd "<insert>"))

;; never visit symlinks when their targets are under version control
;; (visit the target instead)
(setq vc-follow-symlinks t)

;; always automatically reload changed files from disk
(global-auto-revert-mode 1)

;; automatically pair braces, quotes, etc.
(electric-pair-mode 1)

;; auto-save file buffers every N seconds
(run-at-time nil 23 (lambda ()
                        (let ((inhibit-message t))
                          (save-some-buffers t))))

;; auto complete
(use-package company
  :init
  (setq company-dabbrev-ignore-case nil
        company-dabbrev-code-ignore-case nil
        company-dabbrev-downcase nil
        company-idle-delay 0
        company-minimum-prefix-length 1)
  (add-hook 'prog-mode-hook 'company-mode)
  :config
  ;; disables TAB in company-mode, freeing it for yasnippet
  (define-key company-active-map [tab] nil))

;; visual line mode
(visual-line-mode 1)

;; recent files
(use-package recentf
  :init
  (setq recentf-max-menu-items 1000
        recentf-max-saved-items 1000)
  :config
  (recentf-mode 1)
  (add-to-list 'delete-frame-functions
               (lambda (frm)
                 (recentf-save-list)))
  (run-at-time nil 37 (lambda ()
                        (let ((inhibit-message t))
                          (recentf-save-list)))))

;; (sort-words) ♥
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.

The variable `sort-fold-case' determines whether alphabetic case
affects the sort order.

See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))

(use-package expand-region
  :bind ("M-=" . er/expand-region))

;; Swiper & Ivy
(use-package swiper
  :bind (("C-s" . counsel-grep-or-swiper)
         ("C-c C-r" . ivy-resume)
         ("C-x C-r" . ivy-recentf))
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (ivy-mode 1))

(use-package counsel
  :init
  (setq counsel-ag-base-command "ag --hidden --nocolor --nogroup %s -- .")
  :config
  (counsel-mode 1)
  (defun counsel-git-grep-or-ag ()
    (interactive)
    (cond ((projectile-project-p) (counsel-git-grep))
          (t (counsel-ag))))
  (global-set-key (kbd "C-S-s") 'counsel-git-grep-or-ag)
  (global-set-key (kbd "C-c u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c l") 'counsel-locate))

;; periodically kill unused buffers
(use-package midnight
  :init
  (setq clean-buffer-list-delay-general (/ 1.0 24) ; 1 h
        clean-buffer-list-delay-special (* 15 60) ; 15 min
        )
  :config
  (michalrus/add-list-to-list 'clean-buffer-list-kill-buffer-names
                              '("*Backtrace*"))
  (michalrus/add-list-to-list 'clean-buffer-list-kill-regexps
                              '("\\`\\*magit"
                                "\\`\\*Customize"
                                "\\`\\*WoMan"))
  (run-at-time nil 647 (lambda ()
                               (let ((inhibit-message t))
                                 (clean-buffer-list)))))

(use-package google-translate
  :bind ("C-c t" . google-translate-smooth-translate))
